Scratch pad for the safety-valve project:

Links:
---------------------------------------------------------------

  http://github.com/jlouis/safetyvalve
  http://github.com/uwiger/jobs
  
TODO list:
---------------------------------------------------------------
→ Handle killed processes that are queueing.
  A new command type is introduced: kill_queueing. It can only trigger when there is something in the queue. If it triggers, it kills a guy in the queue and waits for the system to correctly update its new state. The rule is that the queue is one smaller after this kill has happened.
  
  This will fail on the current code, until we fix it.
· Handle killed processes that are working.
  A new command type is introduced: kill_working. This kills one of the concurrent workers and it should then transition based on whether there are someone in the queue or not. If not, then the concurrency count goes down by one. If there are, the queue goes down by one because the other becomes a running worker.
· Randomize the selection of a process to kill, but with a shrinking to do it deterministically
  Order all processes by some order.
  `SELECT' the process to kill explicitly.
  `SHRINK' by picking the first one deterministically.

· Consider adding hook points for managing dampening.
  Basically, a queue can be dampened. When this happens, the queue will run at a lower rating until you clear
  the dampening factor.
· Run a series of tests on the code base where we substitute the current queue model
  with a new one.
  OK Fix a thing about timestamps in the model: Enqueueing advances time as well.
    If we don't implement this, we break the specification.
· Run a tab-fix run over all files, so the tab-stop becomes more correct
· Introduce timeouts on the queues.
  Timeout is run when replenishing tokens. This requires a change to the model first,
  where we should calculate, with respect to the current timepoint, what should expire
  and then run a filter on the "queue".
  
  It is especially important to check this when we are running on the new sv_table_ets implementation.
  
· Add support for LIFO queues as well.
  · First, change the model so we can run tests in LIFO order.
  · Then change the code so we can run LIFO
  
· Import the Queue test code from Jobs. The verify queue ordering, it is probably
  easier to just steal the code from jobs and use that code for testing. I already wrote
  it there, so it should be fairly easy to import and use.
  
· Handle overload regulation:
  · Lukas Larsson's hint from Ericsson.
  · Ulf Wiger's points from `jobs' needs to be considered here as well.

DONE:
---------------------------------------------------------------
OK Fix an error in sv_table_ets:out/1

